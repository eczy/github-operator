name: Release
on:
  push:
    tags:
      - v*
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: go mod download
      - name: Test
        run: make test
        env:
          GITHUB_OPERATOR_TEST_ORG: ${{ vars.OPERATOR_TEST_ORGANIZATION }}
          GITHUB_OPERATOR_RECORDER_MODE: replay-only
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kind
      - name: End-to-end test
        run: make test-e2e
        env:
          GITHUB_OPERATOR_TEST_ORG: ${{ vars.OPERATOR_TEST_ORGANIZATION }}
          GITHUB_APP_ID: ${{ secrets.OPERATOR_TEST_APP_ID }}
          GITHUB_INSTALLATION_ID: ${{ secrets.OPERATOR_TEST_INSTALLATION_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.OPERATOR_TEST_PRIVATE_KEY }}
          CONTAINER_TOOL: docker
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.54
      - name: Install yamlfmt
        run: go install github.com/google/yamlfmt/cmd/yamlfmt@latest
      - name: Run yamlfmt
        run: yamlfmt -lint -quiet .
  publish-image:
    needs: [unit, e2e, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GHCR_PUBLISH }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@906ecf0fc0a80f9110f79d9e6c04b1080f4a2621
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push image
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  release:
    needs: [unit, e2e, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Build installer
        run: make build-installer IMG=ghcr.io/eczy/github-operator:${{ github.ref_name }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: ${{ github.ref_name }}
      - name: Upload installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/install.yaml
          asset_name: install.yaml
          asset_content_type: text/plain
      - name: Upload license
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: LICENSE
          asset_name: LICENSE
          asset_content_type: text/plain
